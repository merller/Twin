[
    {
        "code": "// Function to control room temperature\nfunction controlRoomTemperature(room, temp) {\n    console.log(`Setting temperature in room ${room} to ${temp}°C.`);\n    event.controlRoomTemperature(room, temp);\n}\n\n// Function to handle guest check-in\nfunction handleGuestCheckIn(guest) {\n    console.log(`Checking in guest: ${guest}.`);\n    event.handleGuestCheckIn(guest);\n}\n\n// Function to handle guest check-out\nfunction handleGuestCheckOut(guest) {\n    console.log(`Checking out guest: ${guest}.`);\n    event.handleGuestCheckOut(guest);\n}\n\n// Function to send housekeeping notification\nfunction sendHousekeepingNotification(room) {\n    console.log(`Sending housekeeping notification for room ${room}.`);\n    event.sendHousekeepingNotification(room);\n}\n\n// Morning routine for hotel management\nfunction morningRoutine() {\n    if (event.morningRoutine) {\n        controlRoomTemperature('101', 22);\n        handleGuestCheckIn('John Doe');\n        sendHousekeepingNotification('102');\n    }\n}\n\n// Evening routine for hotel management\nfunction eveningRoutine() {\n    if (event.eveningRoutine) {\n        controlRoomTemperature('101', 20);\n        handleGuestCheckOut('John Doe');\n        sendHousekeepingNotification('101');\n    }\n}",
        "accurate_docstring": "When in morningRoutine, set the temperature in room 101 to 22°C, check in guest John Doe, and send a housekeeping notification for room 102. When in eveningRoutine, set the temperature in room 101 to 20°C, check out guest John Doe, and send a housekeeping notification for room 101.",
        "class": "room",
        "template_docstring": "WHEN in morningRoutine, DO set the temperature in room 101 to 22°C; check in guest John Doe; send a housekeeping notification for room 102; WHEN in eveningRoutine, DO set the temperature in room 101 to 20°C; check out guest John Doe; send a housekeeping notification for room 101."
    },
    {
        "code": "// Function to monitor room occupancy\\nfunction monitorRoomOccupancy(roomId) {\\n    let occupancy = event.getRoomOccupancy(roomId);\\n    console.log(`Room ${roomId} occupancy: ${occupancy}`);\\n    return occupancy;\\n}\\n\\n// Function to adjust lighting\\nfunction adjustRoomLighting(roomId, setting) {\\n    console.log(`Adjusting lighting in room ${roomId} to ${setting}.`);\\n    event.adjustRoomLighting(roomId, setting);\\n}\\n\\n// Function to monitor temperature\\nfunction monitorRoomTemperature(roomId) {\\n    let temperature = event.getRoomTemperature(roomId);\\n    console.log(`Room ${roomId} temperature: ${temperature}°C`);\\n    return temperature;\\n}\\n\\n// Function to adjust HVAC\\nfunction adjustRoomHVAC(roomId, setting) {\\n    console.log(`Adjusting HVAC in room ${roomId} to ${setting}.`);\\n    event.adjustRoomHVAC(roomId, setting);\\n}\\n\\n// Function to notify room management\\nfunction notifyRoomManagement(message) {\\n    console.log(`Notifying room management: ${message}`);\\n    event.notifyRoomManagement(message);\\n}\\n\\n// Morning routine for room management\\nfunction morningRoomManagementRoutine() {\\n    if (event.morningRoutine) {\\n        let occupancy = monitorRoomOccupancy('room101');\\n        if (occupancy > 0) {\\n            adjustRoomLighting('room101', 'daylight');\\n            adjustRoomHVAC('room101', 'cooling');\\n        }\\n        let temperature = monitorRoomTemperature('room101');\\n        if (temperature < 20) {\\n            adjustRoomHVAC('room101', 'heating');\\n        }\\n        notifyRoomManagement('Morning room management completed.');\\n    }\\n}\\n\\n// Afternoon routine for room management\\nfunction afternoonRoomManagementRoutine() {\\n    if (event.afternoonRoutine) {\\n        let occupancy = monitorRoomOccupancy('room102');\\n        if (occupancy > 0) {\\n            adjustRoomLighting('room102', 'afternoon');\\n            adjustRoomHVAC('room102', 'cooling');\\n        }\\n        let temperature = monitorRoomTemperature('room102');\\n        if (temperature > 25) {\\n            adjustRoomHVAC('room102', 'cooling');\\n        }\\n        notifyRoomManagement('Afternoon room management completed.');\\n    }\\n}\\n\\n// Evening routine for room management\\nfunction eveningRoomManagementRoutine() {\\n    if (event.eveningRoutine) {\\n        let occupancy = monitorRoomOccupancy('room103');\\n        if (occupancy > 0) {\\n            adjustRoomLighting('room103', 'evening');\\n            adjustRoomHVAC('room103', 'heating');\\n        }\\n        let temperature = monitorRoomTemperature('room103');\\n        if (temperature < 18) {\\n            adjustRoomHVAC('room103', 'heating');\\n        }\\n        notifyRoomManagement('Evening room management completed.');\\n    }\\n}",
        "accurate_docstring": "When in the morningRoomManagementRoutine, monitor the occupancy of room 101. If the occupancy is greater than 0, adjust the lighting to daylight and set the HVAC system to cooling. Monitor the temperature in room 101. If the temperature is less than 20°C, set the HVAC system to heating. Notify room management that the morning room management is completed. When in the afternoonRoomManagementRoutine, monitor the occupancy of room 102. If the occupancy is greater than 0, adjust the lighting to afternoon and set the HVAC system to cooling. Monitor the temperature in room 102. If the temperature is greater than 25°C, set the HVAC system to cooling. Notify room management that the afternoon room management is completed. When in the eveningRoomManagementRoutine, monitor the occupancy of room 103. If the occupancy is greater than 0, adjust the lighting to evening and set the HVAC system to heating. Monitor the temperature in room 103. If the temperature is less than 18°C, set the HVAC system to heating. Notify room management that the evening room management is completed.",
        "class": "room",
        "template_docstring": "WHEN in the morningRoomManagementRoutine, DO monitor the occupancy of room 101; IF the occupancy is greater than 0, THEN adjust the lighting to daylight and set the HVAC system to cooling; monitor the temperature in room 101; IF the temperature is less than 20°C, THEN set the HVAC system to heating; notify room management that the morning room management is completed; WHEN in the afternoonRoomManagementRoutine, DO monitor the occupancy of room 102; IF the occupancy is greater than 0, THEN adjust the lighting to afternoon and set the HVAC system to cooling; monitor the temperature in room 102; IF the temperature is greater than 25°C, THEN set the HVAC system to cooling; notify room management that the afternoon room management is completed; WHEN in the eveningRoomManagementRoutine, DO monitor the occupancy of room 103; IF the occupancy is greater than 0, THEN adjust the lighting to evening and set the HVAC system to heating; monitor the temperature in room 103; IF the temperature is less than 18°C, THEN set the HVAC system to heating; notify room management that the evening room management is completed."
    },
    {
        "code": "// Function to monitor air quality\\nfunction monitorRoomAirQuality(roomId) {\\n    let airQuality = event.getRoomAirQuality(roomId);\\n    console.log(`Air quality in room ${roomId}: ${JSON.stringify(airQuality)}`);\\n    return airQuality;\\n}\\n\\n// Function to adjust air purifier\\nfunction adjustAirPurifier(roomId, setting) {\\n    console.log(`Adjusting air purifier in room ${roomId} to ${setting}.`);\\n    event.adjustAirPurifier(roomId, setting);\\n}\\n\\n// Function to monitor occupancy\\nfunction monitorRoomOccupancy(roomId) {\\n    let occupancy = event.getRoomOccupancy(roomId);\\n    console.log(`Occupancy in room ${roomId}: ${occupancy}`);\\n    return occupancy;\\n}\\n\\n// Function to notify housekeeping\\nfunction notifyHousekeeping(message) {\\n    console.log(`Notifying housekeeping: ${message}`);\\n    event.notifyHousekeeping(message);\\n}\\n\\n// Morning routine for room management\\nfunction morningRoomManagementRoutine() {\\n    if (event.morningRoutine) {\\n        let airQuality = monitorRoomAirQuality('room201');\\n        if (airQuality.PM2_5 > 35) {\\n            adjustAirPurifier('room201', 'high');\\n        }\\n        let occupancy = monitorRoomOccupancy('room201');\\n        if (occupancy === 0) {\\n            event.cleanRoom('room201');\\n        }\\n        notifyHousekeeping('Morning room management completed.');\\n    }\\n}\\n\\n// Afternoon routine for room management\\nfunction afternoonRoomManagementRoutine() {\\n    if (event.afternoonRoutine) {\\n        let airQuality = monitorRoomAirQuality('room202');\\n        if (airQuality.CO2 > 1000) {\\n            adjustAirPurifier('room202', 'high');\\n        }\\n        let occupancy = monitorRoomOccupancy('room202');\\n        if (occupancy === 0) {\\n            event.restockSupplies('room202');\\n        }\\n        notifyHousekeeping('Afternoon room management completed.');\\n    }\\n}\\n\\n// Evening routine for room management\\nfunction eveningRoomManagementRoutine() {\\n    if (event.eveningRoutine) {\\n        let airQuality = monitorRoomAirQuality('room203');\\n        if (airQuality.VOCs > 500) {\\n            adjustAirPurifier('room203', 'high');\\n        }\\n        let occupancy = monitorRoomOccupancy('room203');\\n        if (occupancy === 0) {\\n            event.turnDownService('room203');\\n        }\\n        notifyHousekeeping('Evening room management completed.');\\n    }\\n}",
        "accurate_docstring": "When in the morningRoomManagementRoutine, monitor the air quality in room 201. If the PM2.5 levels are greater than 35, set the air purifier to high. Monitor the occupancy in room 201. If the room is unoccupied, clean the room. Notify housekeeping that the morning room management is completed. When in the afternoonRoomManagementRoutine, monitor the air quality in room 202. If the CO2 levels are greater than 1000 ppm, set the air purifier to high. Monitor the occupancy in room 202. If the room is unoccupied, restock the supplies. Notify housekeeping that the afternoon room management is completed. When in the eveningRoomManagementRoutine, monitor the air quality in room 203. If the VOC levels are greater than 500, set the air purifier to high. Monitor the occupancy in room 203. If the room is unoccupied, perform turn-down service. Notify housekeeping that the evening room management is completed.",
        "class": "room",
        "template_docstring": "WHEN in the morningRoomManagementRoutine, DO monitor the air quality in room 201; IF the PM2.5 levels are greater than 35, THEN set the air purifier to high; monitor the occupancy in room 201; IF the room is unoccupied, THEN clean the room; notify housekeeping that the morning room management is completed; WHEN in the afternoonRoomManagementRoutine, DO monitor the air quality in room 202; IF the CO2 levels are greater than 1000 ppm, THEN set the air purifier to high; monitor the occupancy in room 202; IF the room is unoccupied, THEN restock the supplies; notify housekeeping that the afternoon room management is completed; WHEN in the eveningRoomManagementRoutine, DO monitor the air quality in room 203; IF the VOC levels are greater than 500, THEN set the air purifier to high; monitor the occupancy in room 203; IF the room is unoccupied, THEN perform turn-down service; notify housekeeping that the evening room management is completed."
    },
    {
        "code": "// Function to monitor room security\\nfunction monitorRoomSecurity(roomId) {\\n    let securityStatus = event.getRoomSecurityStatus(roomId);\\n    console.log(`Security status in room ${roomId}: ${JSON.stringify(securityStatus)}`);\\n    return securityStatus;\\n}\\n\\n// Function to lock/unlock room\\nfunction controlRoomLock(roomId, action) {\\n    console.log(`${action}ing room ${roomId}.`);\\n    event.controlRoomLock(roomId, action);\\n}\\n\\n// Function to monitor room lighting\\nfunction monitorRoomLighting(roomId) {\\n    let lighting = event.getRoomLighting(roomId);\\n    console.log(`Lighting in room ${roomId}: ${lighting} lux`);\\n    return lighting;\\n}\\n\\n// Function to adjust room lighting\\nfunction adjustRoomLighting(roomId, setting) {\\n    console.log(`Adjusting lighting in room ${roomId} to ${setting}.`);\\n    event.adjustRoomLighting(roomId, setting);\\n}\\n\\n// Function to notify room management\\nfunction notifyRoomManagement(message) {\\n    console.log(`Notifying room management: ${message}`);\\n    event.notifyRoomManagement(message);\\n}\\n\\n// Morning routine for room management\\nfunction morningRoomManagementRoutine() {\\n    if (event.morningRoutine) {\\n        let securityStatus = monitorRoomSecurity('room201');\\n        if (!securityStatus.locked) {\\n            controlRoomLock('room201', 'lock');\\n        }\\n        let lighting = monitorRoomLighting('room201');\\n        if (lighting < 300) {\\n            adjustRoomLighting('room201', 'increase');\\n        }\\n        notifyRoomManagement('Morning room management routine completed.');\\n    }\\n}\\n\\n// Afternoon routine for room management\\nfunction afternoonRoomManagementRoutine() {\\n    if (event.afternoonRoutine) {\\n        let securityStatus = monitorRoomSecurity('room202');\\n        if (securityStatus.locked) {\\n            controlRoomLock('room202', 'unlock');\\n        }\\n        let lighting = monitorRoomLighting('room202');\\n        if (lighting > 700) {\\n            adjustRoomLighting('room202', 'decrease');\\n        }\\n        notifyRoomManagement('Afternoon room management routine completed.');\\n    }\\n}\\n\\n// Evening routine for room management\\nfunction eveningRoomManagementRoutine() {\\n    if (event.eveningRoutine) {\\n        let securityStatus = monitorRoomSecurity('room203');\\n        if (!securityStatus.locked) {\\n            controlRoomLock('room203', 'lock');\\n        }\\n        let lighting = monitorRoomLighting('room203');\\n        if (lighting < 200) {\\n            adjustRoomLighting('room203', 'increase');\\n        }\\n        notifyRoomManagement('Evening room management routine completed.');\\n    }\\n}",
        "accurate_docstring": "When in the morningRoomManagementRoutine, monitor the security status of room201. If the room is not locked, lock room201. Monitor the lighting in room201. If the lighting is below 300 lux, increase the lighting. Notify room management that the morning room management routine is completed. In the afternoonRoomManagementRoutine, monitor the security status of room202. If the room is locked, unlock room202. Monitor the lighting in room202. If the lighting is above 700 lux, decrease the lighting. Notify room management that the afternoon room management routine is completed. In the eveningRoomManagementRoutine, monitor the security status of room203. If the room is not locked, lock room203. Monitor the lighting in room203. If the lighting is below 200 lux, increase the lighting. Notify room management that the evening room management routine is completed.",
        "class": "room",
        "template_docstring": "WHEN in the morningRoomManagementRoutine, DO monitor the security status of room201; IF the room is not locked, THEN lock room201; monitor the lighting in room201; IF the lighting is below 300 lux, THEN increase the lighting; notify room management that the morning room management routine is completed; WHEN in the afternoonRoomManagementRoutine, DO monitor the security status of room202; IF the room is locked, THEN unlock room202; monitor the lighting in room202; IF the lighting is above 700 lux, THEN decrease the lighting; notify room management that the afternoon room management routine is completed; WHEN in the eveningRoomManagementRoutine, DO monitor the security status of room203; IF the room is not locked, THEN lock room203; monitor the lighting in room203; IF the lighting is below 200 lux, THEN increase the lighting; notify room management that the evening room management routine is completed."
    },
    {
        "code": "function startRecording() {\n    console.log(\"Starting camera recording.\");\n    event.startRecording();\n}\n\n\nfunction stopRecording() {\n    console.log(\"Stopping camera recording.\");\n    event.stopRecording();\n}\n\n\nfunction sendAlert() {\n    console.log(\"Sending alert to security company.\");\n    event.sendAlert();\n}\n\n\nfunction checkDoorsAndWindows() {\n    const allClosed = event.checkDoorsAndWindows();\n    if (!allClosed) {\n        console.log(\"Some doors or windows are open. Sending alert.\");\n        event.sendWarning(\"Some doors or windows are open.\");\n    }\n}\n\n\nfunction playWarningSound() {\n    console.log(\"Playing warning sound.\");\n    event.playWarningSound();\n}\n\n\neventBus.on('intrusionDetected', () => {\n    event.turnOnLights();\n    playWarningSound();\n    startRecording();\n    sendAlert();\n    checkDoorsAndWindows();\n});\n\neventBus.on('safeConfirmed', () => {\n    event.turnOffLights();\n    stopRecording();\n    event.stopWarningSound();\n});\n\n\nfunction setupSecurityScene() {\n    checkDoorsAndWindows();\n\n    eventBus.emit('intrusionDetected');\n    eventBus.emit('safeConfirmed');\n}\n\n\nsetupSecurityScene();",
        "accurate_docstring": "Intrusion detection: When abnormal movement is detected in the house, trigger the alarm system, turn on all lights, and play a warning sound through the smart speaker system.Security cameras: Activate the cameras to record and send real-time video streams to the homeowner's mobile phone.Door and window detection: Check if all doors and windows are closed; if any are open, issue a warning alert.Alarm system: Connect with the alarm company, automatically sending an alert message to the company.Reset security system: After the homeowner confirms safety, turn off the alarm system, restore normal lighting, and stop camera recording.",
        "class": "room",
        "template_docstring": "WHEN abnormal movement is detected in the house, THEN trigger the alarm system, turn on all lights, and play a warning sound through the smart speaker system. Security cameras: DO activate the cameras to record and send real-time video streams to the homeowner's mobile phone. Door and window detection: DO check IF all doors and windows are closed; IF any are open, THEN issue a warning alert. Alarm system: DO connect with the alarm company, automatically sending an alert message to the company. Reset security system: AFTER the homeowner confirms safety, DO turn off the alarm system, restore normal lighting, and stop camera recording."
    },
    {
        "code": "// Function to monitor room security\\nfunction monitorRoomSecurity(roomId) {\\n    let securityStatus = event.getRoomSecurityStatus(roomId);\\n    console.log(`Security status in room ${roomId}: ${JSON.stringify(securityStatus)}`);\\n    return securityStatus;\\n}\\n\\n// Function to lock/unlock room\\nfunction controlRoomLock(roomId, action) {\\n    console.log(`${action}ing room ${roomId}.`);\\n    event.controlRoomLock(roomId, action);\\n}\\n\\n// Function to monitor room lighting\\nfunction monitorRoomLighting(roomId) {\\n    let lighting = event.getRoomLighting(roomId);\\n    console.log(`Lighting in room ${roomId}: ${lighting} lux`);\\n    return lighting;\\n}\\n\\n// Function to adjust room lighting\\nfunction adjustRoomLighting(roomId, setting) {\\n    console.log(`Adjusting lighting in room ${roomId} to ${setting}.`);\\n    event.adjustRoomLighting(roomId, setting);\\n}\\n\\n// Function to monitor room temperature\\nfunction monitorRoomTemperature(roomId) {\\n    let temp = event.getRoomTemperature(roomId);\\n    console.log(`Room ${roomId} temperature: ${temp}°C`);\\n    return temp;\\n}\\n\\n// Function to adjust room temperature\\nfunction adjustRoomTemperature(roomId, temp) {\\n    console.log(`Setting room ${roomId} temperature to ${temp}°C.`);\\n    event.adjustRoomTemperature(roomId, temp);\\n}\\n\\n// Function to notify room management\\nfunction notifyRoomManagement(message) {\\n    console.log(`Notifying room management: ${message}`);\\n    event.notifyRoomManagement(message);\\n}\\n\\n// Morning routine for room management\\nfunction morningRoomManagementRoutine() {\\n    if (event.morningRoutine) {\\n        let securityStatus = monitorRoomSecurity('room201');\\n        if (!securityStatus.locked) {\\n            controlRoomLock('room201', 'lock');\\n        }\\n        let lighting = monitorRoomLighting('room201');\\n        if (lighting < 300) {\\n            adjustRoomLighting('room201', 'increase');\\n        }\\n        let temp = monitorRoomTemperature('room201');\\n        if (temp < 20) {\\n            adjustRoomTemperature('room201', 22);\\n        }\\n        notifyRoomManagement('Morning room management routine completed.');\\n    }\\n}\\n\\n// Afternoon routine for room management\\nfunction afternoonRoomManagementRoutine() {\\n    if (event.afternoonRoutine) {\\n        let securityStatus = monitorRoomSecurity('room202');\\n        if (securityStatus.locked) {\\n            controlRoomLock('room202', 'unlock');\\n        }\\n        let lighting = monitorRoomLighting('room202');\\n        if (lighting > 700) {\\n            adjustRoomLighting('room202', 'decrease');\\n        }\\n        let temp = monitorRoomTemperature('room202');\\n        if (temp > 24) {\\n            adjustRoomTemperature('room202', 22);\\n        }\\n        notifyRoomManagement('Afternoon room management routine completed.');\\n    }\\n}\\n\\n// Evening routine for room management\\nfunction eveningRoomManagementRoutine() {\\n    if (event.eveningRoutine) {\\n        let securityStatus = monitorRoomSecurity('room203');\\n        if (!securityStatus.locked) {\\n            controlRoomLock('room203', 'lock');\\n        }\\n        let lighting = monitorRoomLighting('room203');\\n        if (lighting < 200) {\\n            adjustRoomLighting('room203', 'increase');\\n        }\\n        let temp = monitorRoomTemperature('room203');\\n        if (temp < 18) {\\n            adjustRoomTemperature('room203', 20);\\n        }\\n        notifyRoomManagement('Evening room management routine completed.');\\n    }\\n}",
        "accurate_docstring": "When in the morningRoomManagementRoutine, monitor the security status of room201. If the room is not locked, lock room201. Monitor the lighting in room201. If the lighting is below 300 lux, increase the lighting. Monitor the temperature of room201. If the temperature is below 20°C, adjust the temperature to 22°C. Notify room management that the morning room management routine is completed. In the afternoonRoomManagementRoutine, monitor the security status of room202. If the room is locked, unlock room202. Monitor the lighting in room202. If the lighting is above 700 lux, decrease the lighting. Monitor the temperature of room202. If the temperature is above 24°C, adjust the temperature to 22°C. Notify room management that the afternoon room management routine is completed. In the eveningRoomManagementRoutine, monitor the security status of room203. If the room is not locked, lock room203. Monitor the lighting in room203. If the lighting is below 200 lux, increase the lighting. Monitor the temperature of room203. If the temperature is below 18°C, adjust the temperature to 20°C. Notify room management that the evening room management routine is completed.",
        "class": "room",
        "template_docstring": "WHEN in the morningRoomManagementRoutine, DO monitor the security status of room201; IF the room is not locked, THEN lock room201; monitor the lighting in room201; IF the lighting is below 300 lux, THEN increase the lighting; monitor the temperature of room201; IF the temperature is below 20°C, THEN adjust the temperature to 22°C; notify room management that the morning room management routine is completed; WHEN in the afternoonRoomManagementRoutine, DO monitor the security status of room202; IF the room is locked, THEN unlock room202; monitor the lighting in room202; IF the lighting is above 700 lux, THEN decrease the lighting; monitor the temperature of room202; IF the temperature is above 24°C, THEN adjust the temperature to 22°C; notify room management that the afternoon room management routine is completed; WHEN in the eveningRoomManagementRoutine, DO monitor the security status of room203; IF the room is not locked, THEN lock room203; monitor the lighting in room203; IF the lighting is below 200 lux, THEN increase the lighting; monitor the temperature of room203; IF the temperature is below 18°C, THEN adjust the temperature to 20°C; notify room management that the evening room management routine is completed."
    },
    {
        "code": "// Function to monitor refrigerator temperature\\nfunction monitorRefrigeratorTemp(fridgeId) {\\n    let temp = event.getRefrigeratorTemp(fridgeId);\\n    console.log(`Refrigerator ${fridgeId} temperature: ${temp}°C`);\\n    return temp;\\n}\\n\\n// Function to adjust refrigerator temperature\\nfunction adjustRefrigeratorTemp(fridgeId, temp) {\\n    console.log(`Setting refrigerator ${fridgeId} temperature to ${temp}°C.`);\\n    event.adjustRefrigeratorTemp(fridgeId, temp);\\n}\\n\\n// Function to monitor oven status\\nfunction monitorOvenStatus(ovenId) {\\n    let status = event.getOvenStatus(ovenId);\\n    console.log(`Oven ${ovenId} status: ${JSON.stringify(status)}`);\\n    return status;\\n}\\n\\n// Function to clean oven\\nfunction cleanOven(ovenId) {\\n    console.log(`Cleaning oven ${ovenId}.`);\\n    event.cleanOven(ovenId);\\n}\\n\\n// Function to monitor pantry stock\\nfunction monitorPantryStock(itemId) {\\n    let stock = event.getPantryStock(itemId);\\n    console.log(`Pantry stock for ${itemId}: ${stock}`);\\n    return stock;\\n}\\n\\n// Function to reorder pantry stock\\nfunction reorderPantryStock(itemId, quantity) {\\n    console.log(`Reordering ${quantity} units of ${itemId}.`);\\n    event.reorderPantryStock(itemId, quantity);\\n}\\n\\n// Function to notify kitchen staff\\nfunction notifyKitchenStaff(message) {\\n    console.log(`Notifying kitchen staff: ${message}`);\\n    event.notifyKitchenStaff(message);\\n}\\n\\n// Morning routine for kitchen\\nfunction morningKitchenRoutine() {\\n    if (event.morningRoutine) {\\n        let fridgeTemp = monitorRefrigeratorTemp('fridge1');\\n        if (fridgeTemp > 5) {\\n            adjustRefrigeratorTemp('fridge1', 3);\\n        }\\n        let ovenStatus = monitorOvenStatus('oven1');\\n        if (ovenStatus.needsCleaning) {\\n            cleanOven('oven1');\\n        }\\n        let pantryStock = monitorPantryStock('flour');\\n        if (pantryStock < 20) {\\n            reorderPantryStock('flour', 50);\\n        }\\n        notifyKitchenStaff('Morning kitchen routine completed.');\\n    }\\n}\\n\\n// Afternoon routine for kitchen\\nfunction afternoonKitchenRoutine() {\\n    if (event.afternoonRoutine) {\\n        let fridgeTemp = monitorRefrigeratorTemp('fridge2');\\n        if (fridgeTemp < 1) {\\n            adjustRefrigeratorTemp('fridge2', 3);\\n        }\\n        let ovenStatus = monitorOvenStatus('oven2');\\n        if (ovenStatus.needsCleaning) {\\n            cleanOven('oven2');\\n        }\\n        let pantryStock = monitorPantryStock('sugar');\\n        if (pantryStock < 10) {\\n            reorderPantryStock('sugar', 30);\\n        }\\n        notifyKitchenStaff('Afternoon kitchen routine completed.');\\n    }\\n}\\n\\n// Evening routine for kitchen\\nfunction eveningKitchenRoutine() {\\n    if (event.eveningRoutine) {\\n        let fridgeTemp = monitorRefrigeratorTemp('fridge3');\\n        if (fridgeTemp > 7) {\\n            adjustRefrigeratorTemp('fridge3', 5);\\n        }\\n        let ovenStatus = monitorOvenStatus('oven3');\\n        if (ovenStatus.needsCleaning) {\\n            cleanOven('oven3');\\n        }\\n        let pantryStock = monitorPantryStock('salt');\\n        if (pantryStock < 15) {\\n            reorderPantryStock('salt', 40);\\n        }\\n        notifyKitchenStaff('Evening kitchen routine completed.');\\n    }\\n}",
        "accurate_docstring": "When in the morningKitchenRoutine, monitor the temperature of fridge1. If the temperature is above 5°C, adjust the temperature to 3°C. Monitor the status of oven1. If it needs cleaning, clean oven1. Monitor the pantry stock for flour. If the stock is below 20 units, reorder 50 units of flour. Notify the kitchen staff that the morning kitchen routine is completed. In the afternoonKitchenRoutine, monitor the temperature of fridge2. If the temperature is below 1°C, adjust the temperature to 3°C. Monitor the status of oven2. If it needs cleaning, clean oven2. Monitor the pantry stock for sugar. If the stock is below 10 units, reorder 30 units of sugar. Notify the kitchen staff that the afternoon kitchen routine is completed. In the eveningKitchenRoutine, monitor the temperature of fridge3. If the temperature is above 7°C, adjust the temperature to 5°C. Monitor the status of oven3. If it needs cleaning, clean oven3. Monitor the pantry stock for salt. If the stock is below 15 units, reorder 40 units of salt. Notify the kitchen staff that the evening kitchen routine is completed.",
        "class": "room",
        "template_docstring": "WHEN in the morningKitchenRoutine, DO monitor the temperature of fridge1; IF the temperature is above 5°C, THEN adjust the temperature to 3°C; monitor the status of oven1; IF it needs cleaning, THEN clean oven1; monitor the pantry stock for flour; IF the stock is below 20 units, THEN reorder 50 units of flour; notify the kitchen staff that the morning kitchen routine is completed; WHEN in the afternoonKitchenRoutine, DO monitor the temperature of fridge2; IF the temperature is below 1°C, THEN adjust the temperature to 3°C; monitor the status of oven2; IF it needs cleaning, THEN clean oven2; monitor the pantry stock for sugar; IF the stock is below 10 units, THEN reorder 30 units of sugar; notify the kitchen staff that the afternoon kitchen routine is completed; WHEN in the eveningKitchenRoutine, DO monitor the temperature of fridge3; IF the temperature is above 7°C, THEN adjust the temperature to 5°C; monitor the status of oven3; IF it needs cleaning, THEN clean oven3; monitor the pantry stock for salt; IF the stock is below 15 units, THEN reorder 40 units of salt; notify the kitchen staff that the evening kitchen routine is completed."
    },
    {
        "code": "// Function to monitor production line efficiency\\nfunction monitorProductionLineEfficiency(lineId) {\\n    let efficiency = event.getProductionLineEfficiency(lineId);\\n    console.log(`Production line ${lineId} efficiency: ${efficiency}%`);\\n    return efficiency;\\n}\\n\\n// Function to schedule production line maintenance\\nfunction scheduleProductionLineMaintenance(lineId) {\\n    console.log(`Scheduling maintenance for production line ${lineId}.`);\\n    event.scheduleProductionLineMaintenance(lineId);\\n}\\n\\n// Function to monitor air quality\\nfunction monitorAirQuality(zone) {\\n    let airQuality = event.getAirQuality(zone);\\n    console.log(`Air quality in ${zone}: ${JSON.stringify(airQuality)}`);\\n    return airQuality;\\n}\\n\\n// Function to adjust air filtration\\nfunction adjustAirFiltration(zone, setting) {\\n    console.log(`Adjusting air filtration in ${zone} to ${setting}.`);\\n    event.adjustAirFiltration(zone, setting);\\n}\\n\\n// Function to monitor raw material stock\\nfunction monitorRawMaterialStock(materialId) {\\n    let stock = event.getRawMaterialStock(materialId);\\n    console.log(`Raw material stock for ${materialId}: ${stock}`);\\n    return stock;\\n}\\n\\n// Function to reorder raw materials\\nfunction reorderRawMaterials(materialId, quantity) {\\n    console.log(`Reordering ${quantity} units of ${materialId}.`);\\n    event.reorderRawMaterials(materialId, quantity);\\n}\\n\\n// Function to notify factory manager\\nfunction notifyFactoryManager(message) {\\n    console.log(`Notifying factory manager: ${message}`);\\n    event.notifyFactoryManager(message);\\n}\\n\\n// Morning routine for factory\\nfunction morningFactoryRoutine() {\\n    if (event.morningRoutine) {\\n        let efficiency = monitorProductionLineEfficiency('line1');\\n        if (efficiency < 75) {\\n            scheduleProductionLineMaintenance('line1');\\n        }\\n        let airQuality = monitorAirQuality('zone1');\\n        if (airQuality.PM10 > 50) {\\n            adjustAirFiltration('zone1', 'high');\\n        }\\n        let rawMaterialStock = monitorRawMaterialStock('steel');\\n        if (rawMaterialStock < 100) {\\n            reorderRawMaterials('steel', 500);\\n        }\\n        notifyFactoryManager('Morning factory routine completed.');\\n    }\\n}\\n\\n// Afternoon routine for factory\\nfunction afternoonFactoryRoutine() {\\n    if (event.afternoonRoutine) {\\n        let efficiency = monitorProductionLineEfficiency('line2');\\n        if (efficiency < 80) {\\n            scheduleProductionLineMaintenance('line2');\\n        }\\n        let airQuality = monitorAirQuality('zone2');\\n        if (airQuality.VOCs > 100) {\\n            adjustAirFiltration('zone2', 'medium');\\n        }\\n        let rawMaterialStock = monitorRawMaterialStock('plastic');\\n        if (rawMaterialStock < 200) {\\n            reorderRawMaterials('plastic', 600);\\n        }\\n        notifyFactoryManager('Afternoon factory routine completed.');\\n    }\\n}\\n\\n// Evening routine for factory\\nfunction eveningFactoryRoutine() {\\n    if (event.eveningRoutine) {\\n        let efficiency = monitorProductionLineEfficiency('line3');\\n        if (efficiency < 85) {\\n            scheduleProductionLineMaintenance('line3');\\n        }\\n        let airQuality = monitorAirQuality('zone3');\\n        if (airQuality.CO2 > 800) {\\n            adjustAirFiltration('zone3', 'high');\\n        }\\n        let rawMaterialStock = monitorRawMaterialStock('glass');\\n        if (rawMaterialStock < 150) {\\n            reorderRawMaterials('glass', 700);\\n        }\\n        notifyFactoryManager('Evening factory routine completed.');\\n    }\\n}",
        "accurate_docstring": "When in the morningFactoryRoutine, monitor the efficiency of production line1. If the efficiency is below 75%, schedule maintenance for line1. Monitor the air quality in zone1. If PM10 levels are above 50, adjust the air filtration to high. Monitor the raw material stock for steel. If the stock is below 100 units, reorder 500 units of steel. Notify the factory manager that the morning factory routine is completed. In the afternoonFactoryRoutine, monitor the efficiency of production line2. If the efficiency is below 80%, schedule maintenance for line2. Monitor the air quality in zone2. If VOC levels are above 100, adjust the air filtration to medium. Monitor the raw material stock for plastic. If the stock is below 200 units, reorder 600 units of plastic. Notify the factory manager that the afternoon factory routine is completed. In the eveningFactoryRoutine, monitor the efficiency of production line3. If the efficiency is below 85%, schedule maintenance for line3. Monitor the air quality in zone3. If CO2 levels are above 800, adjust the air filtration to high. Monitor the raw material stock for glass. If the stock is below 150 units, reorder 700 units of glass. Notify the factory manager that the evening factory routine is completed.",
        "class": "room",
        "template_docstring": "WHEN in the morningFactoryRoutine, DO monitor the efficiency of production line1; IF the efficiency is below 75%, THEN schedule maintenance for line1; monitor the air quality in zone1; IF PM10 levels are above 50, THEN adjust the air filtration to high; monitor the raw material stock for steel; IF the stock is below 100 units, THEN reorder 500 units of steel; notify the factory manager that the morning factory routine is completed; WHEN in the afternoonFactoryRoutine, DO monitor the efficiency of production line2; IF the efficiency is below 80%, THEN schedule maintenance for line2; monitor the air quality in zone2; IF VOC levels are above 100, THEN adjust the air filtration to medium; monitor the raw material stock for plastic; IF the stock is below 200 units, THEN reorder 600 units of plastic; notify the factory manager that the afternoon factory routine is completed; WHEN in the eveningFactoryRoutine, DO monitor the efficiency of production line3; IF the efficiency is below 85%, THEN schedule maintenance for line3; monitor the air quality in zone3; IF CO2 levels are above 800, THEN adjust the air filtration to high; monitor the raw material stock for glass; IF the stock is below 150 units, THEN reorder 700 units of glass; notify the factory manager that the evening factory routine is completed."
    },
    {
        "code": "function recognizeCustomer() {\n    const customerId = getCustomerId();\n    console.log(`Customer recognized: ${customerId}`);\n    event.recognizeCustomer(customerId);\n}\nfunction showPersonalizedRecommendations(customerId) {\n    const recommendations = getRecommendations(customerId);\n    console.log(`Showing recommendations for customer ${customerId}: ${recommendations}`);\n    event.showRecommendations(recommendations);\n}\nfunction queryProductInfo(productId) {\n    const productInfo = getProductInfo(productId);\n    console.log(`Product info for ${productId}: ${productInfo}`);\n    event.showProductInfo(productInfo);\n}\nfunction selfCheckout() {\n    const totalAmount = calculateTotal();\n    console.log(`Total amount: ${totalAmount}`);\n    event.processPayment(totalAmount);\n}\nfunction sendElectronicReceipt(customerId) {\n    const receipt = generateReceipt(customerId);\n    console.log(`Sending electronic receipt to customer ${customerId}`);\n    event.sendReceipt(receipt);\n}\nfunction monitorInventory() {\n    const inventoryStatus = getInventoryStatus();\n    console.log(`Inventory status: ${inventoryStatus}`);\n    event.updateInventoryStatus(inventoryStatus);\n}\nfunction autoRestock() {\n    const restockOrder = generateRestockOrder();\n    console.log(`Generating restock order: ${restockOrder}`);\n    event.sendRestockOrder(restockOrder);\n}\nfunction getCustomerId() {\n    return \"C12345\";\n}\nfunction generateReceipt(customerId) {\n    return { customerId: customerId, items: [\"Product A\", \"Product B\"], total: 200 };\n}\nfunction getInventoryStatus() {\n    return { \"Product A\": 10, \"Product B\": 5 };\n}\nfunction generateRestockOrder() {\n    return { \"Product A\": 20, \"Product B\": 15 };\n}\neventBus.on('customerEnter', () => {\n    const customerId = getCustomerId();\n    recognizeCustomer(customerId);\n    showPersonalizedRecommendations(customerId);\n});\neventBus.on('productQuery', (productId) => {\n    queryProductInfo(productId);\n});\neventBus.on('checkout', () => {\n    selfCheckout();\n    const customerId = getCustomerId();\n    sendElectronicReceipt(customerId);\n});\neventBus.on('inventoryCheck', () => {\n    monitorInventory();\n    autoRestock();\n});\nfunction setupSmartRetailScene() {\n    eventBus.emit('customerEnter'); \n    eventBus.emit('productQuery', \"P123\"); \n    eventBus.emit('checkout'); \n    eventBus.emit('inventoryCheck'); \n}\nsetupSmartRetailScene();",
        "accurate_docstring": "Customer Entry into the Store:    Customer Recognition: Upon entering the store, the system automatically identifies customers using facial recognition technology through cameras, welcoming returning customers and recording new ones.Personalized Recommendations: Based on customers' shopping history and preferences, the system displays personalized product recommendations on screens within the store.Interactive Shopping Experience:Smart Shopping Cart: Equipped with scanners and displays, the smart shopping cart allows customers to view the prices and total amount of items in their cart at any time, and receive personalized promotional messages.Product Information Inquiry: Customers can scan product barcodes to view detailed information, including prices, ingredients, and usage instructions, on the smart shopping cart or in-store displays.Checkout Process:Self-Service Checkout: Self-service checkout terminals are provided where customers can scan item barcodes themselves, and the system automatically calculates the total amount and offers multiple payment methods.Express Checkout: For registered members, the system enables express checkout via their smartphones or facial recognition, deducting payments directly from their member accounts without scanning items.After-Sales Services:Electronic Receipts: Upon checkout, the system generates electronic receipts and sends them to customers' email addresses or mobile apps.Customer Feedback: Satisfaction survey questionnaires are sent to customers after checkout to collect feedback on their shopping experiences.Inventory Management:Real-Time Inventory Monitoring: The system continuously monitors the inventory status of all products in the store and automatically alerts staff when inventory levels are low.Automatic Restocking: Based on sales data and inventory levels, the system generates restocking orders and sends them to suppliers to ensure timely replenishment of goods.",
        "class": "room",
        "template_docstring": "WHEN a customer enters the store, DO automatically identify customers using facial recognition technology through cameras, welcoming returning customers and recording new ones. Personalized Recommendations: BASED on customers' shopping history and preferences, DO display personalized product recommendations on screens within the store. Interactive Shopping Experience: Smart Shopping Cart: DO equip with scanners and displays, allowing customers to view the prices and total amount of items in their cart at any time, and receive personalized promotional messages. Product Information Inquiry: DO allow customers to scan product barcodes to view detailed information, including prices, ingredients, and usage instructions, on the smart shopping cart or in-store displays. Checkout Process: Self-Service Checkout: PROVIDE self-service checkout terminals where customers can scan item barcodes themselves, and the system automatically calculates the total amount and offers multiple payment methods. Express Checkout: FOR registered members, ENABLE express checkout via their smartphones or facial recognition, deducting payments directly from their member accounts without scanning items. After-Sales Services: Electronic Receipts: UPON checkout, DO generate electronic receipts and send them to customers' email addresses or mobile apps. Customer Feedback: SEND satisfaction survey questionnaires to customers after checkout to collect feedback on their shopping experiences. Inventory Management: Real-Time Inventory Monitoring: DO continuously monitor the inventory status of all products in the store and automatically alert staff when inventory levels are low. Automatic Restocking: BASED on sales data and inventory levels, DO generate restocking orders and send them to suppliers to ensure timely replenishment of goods."
    },
    {
        "code": "function scanTicket(ticketInfo) {\n    console.log(`Scanning ticket: ${JSON.stringify(ticketInfo)}.`);\n    event.scanTicket(ticketInfo);\n}\nfunction sendWelcomeMessage(visitorInfo) {\n    console.log(`Sending welcome message to ${visitorInfo.name}.`);\n    event.sendWelcomeMessage(visitorInfo);\n}\nfunction displayExhibitInfo(exhibitInfo) {\n    console.log(`Displaying info for exhibit: ${JSON.stringify(exhibitInfo)}.`);\n    event.displayExhibitInfo(exhibitInfo);\n}\nfunction startAudioGuide(exhibitInfo) {\n    console.log(`Starting audio guide for exhibit: ${exhibitInfo.name}.`);\n    event.startAudioGuide(exhibitInfo);\n}\nfunction adjustEnvironment(environmentData) {\n    const { temperature, humidity } = environmentData;\n    console.log(`Adjusting environment - Temperature: ${temperature}°C, Humidity: ${humidity}%.`);\n    event.adjustEnvironment(environmentData);\n}\nfunction adjustLighting(lightingData) {\n    console.log(`Adjusting lighting to ${lightingData.level} level.`);\n    event.adjustLighting(lightingData);\n}\nfunction sendRestAreaReminder() {\n    event.sendRestAreaReminder(visitorInfo);\n}\nfunction sendSafetyAlert(visitorInfo) {\n    console.log(`Sending safety alert to ${visitorInfo.name}.`);\n    event.sendSafetyAlert(visitorInfo);\n}\neventBus.on('visitorEnter', (visitorInfo) => {\n    scanTicket(visitorInfo.ticket);\n    sendWelcomeMessage(visitorInfo);\n});\neventBus.on('exhibitInteraction', (exhibitInfo) => {\n    displayExhibitInfo(exhibitInfo);\n    startAudioGuide(exhibitInfo);\n});\neventBus.on('environmentControl', (environmentData) => {\n    adjustEnvironment(environmentData);\n    adjustLighting(environmentData.lighting);\n});\neventBus.on('visitorComfortService', (visitorInfo) => {\n    sendRestAreaReminder(visitorInfo);\n});\neventBus.on('safetyAlert', (visitorInfo) => {\n    sendSafetyAlert(visitorInfo);\n});\nfunction setupMuseumScene() {\n    const visitorInfo = getvisitorInfo();\n    const exhibitInfo = getexhibitInfo();\n    const environmentData = environmentData();\n    eventBus.emit('visitorEnter', visitorInfo); \n     eventBus.emit('exhibitInteraction', exhibitInfo); \n    eventBus.emit('environmentControl', environmentData); \n     eventBus.emit('visitorComfortService', visitorInfo); \n     eventBus.emit('safetyAlert', visitorInfo); \n}\nsetupMuseumScene();",
        "accurate_docstring": "Museum Entry Preparation:Ticket Scanning: As visitors enter the museum, the system scans their tickets to confirm their identity and record entry time.Welcome Messages: Sending welcome messages and guide maps to visitors upon entry to help them understand the layout and exhibition content of the museum.Interactive Exhibits:Exhibit Information Display: When visitors approach a particular exhibit, the system automatically displays detailed information about the exhibit on their devices, including historical background and related videos.Audio Guide: Visitors can choose to activate an audio guide, with the system playing audio explanations about the exhibit.Environmental Control:Temperature and Humidity Regulation: The system continuously monitors the temperature and humidity within the museum and adjusts air conditioning and humidifiers as needed to maintain a suitable environment.Lighting Control: Adjusting lighting brightness intelligently based on visitor activity and exhibition requirements to ensure the best viewing experience.Visitor Comfort Services:Rest Area Reminders: If visitors stay in the museum for an extended period, the system will remind them of nearby rest areas for their convenience.Safety Alerts: In emergency situations, the system sends safety alert messages to guide visitors to evacuate quickly to safe zones.",
        "class": "room",
        "template_docstring": "Museum Entry Preparation: Ticket Scanning: AS visitors enter the museum, DO scan their tickets to confirm their identity and record entry time. Welcome Messages: SEND welcome messages and guide maps to visitors upon entry to help them understand the layout and exhibition content of the museum. Interactive Exhibits: Exhibit Information Display: WHEN visitors approach a particular exhibit, DO automatically display detailed information about the exhibit on their devices, including historical background and related videos. Audio Guide: ALLOW visitors to choose to activate an audio guide, with the system playing audio explanations about the exhibit. Environmental Control: Temperature and Humidity Regulation: CONTINUOUSLY monitor the temperature and humidity within the museum and adjust air conditioning and humidifiers as needed to maintain a suitable environment. Lighting Control: ADJUST lighting brightness intelligently based on visitor activity and exhibition requirements to ensure the best viewing experience. Visitor Comfort Services: Rest Area Reminders: IF visitors stay in the museum for an extended period, THEN remind them of nearby rest areas for their convenience. Safety Alerts: IN emergency situations, DO send safety alert messages to guide visitors to evacuate quickly to safe zones."
    },
    {
        "code": "// Function to monitor room occupancy\\nfunction monitorRoomOccupancy(roomId) {\\n    let occupancy = event.getRoomOccupancy(roomId);\\n    console.log(`Room ${roomId} occupancy: ${occupancy}`);\\n    return occupancy;\\n}\\n\\n// Function to monitor minibar status\\nfunction monitorMinibarStatus(roomId) {\\n    let minibarStatus = event.getMinibarStatus(roomId);\\n    console.log(`Minibar status in room ${roomId}: ${JSON.stringify(minibarStatus)}`);\\n    return minibarStatus;\\n}\\n\\n// Function to restock minibar\\nfunction restockMinibar(roomId, item, quantity) {\\n    console.log(`Restocking ${quantity} units of ${item} in minibar for room ${roomId}.`);\\n    event.restockMinibar(roomId, item, quantity);\\n}\\n\\n// Function to monitor room temperature\\nfunction monitorRoomTemperature(roomId) {\\n    let temp = event.getRoomTemperature(roomId);\\n    console.log(`Room ${roomId} temperature: ${temp}°C`);\\n    return temp;\\n}\\n\\n// Function to adjust room temperature\\nfunction adjustRoomTemperature(roomId, temp) {\\n    console.log(`Setting room ${roomId} temperature to ${temp}°C.`);\\n    event.adjustRoomTemperature(roomId, temp);\\n}\\n\\n// Function to notify housekeeping\\nfunction notifyHousekeeping(message) {\\n    console.log(`Notifying housekeeping: ${message}`);\\n    event.notifyHousekeeping(message);\\n}\\n\\n// Morning routine for hotel\\nfunction morningHotelRoutine() {\\n    if (event.morningRoutine) {\\n        let occupancy = monitorRoomOccupancy('room101');\\n        if (occupancy === 0) {\\n            event.cleanRoom('room101');\\n        }\\n        let minibarStatus = monitorMinibarStatus('room101');\\n        if (minibarStatus.needsRestocking) {\\n            restockMinibar('room101', 'water', 5);\\n        }\\n        let temp = monitorRoomTemperature('room101');\\n        if (temp < 20) {\\n            adjustRoomTemperature('room101', 22);\\n        }\\n        notifyHousekeeping('Morning hotel routine completed.');\\n    }\\n}\\n\\n// Afternoon routine for hotel\\nfunction afternoonHotelRoutine() {\\n    if (event.afternoonRoutine) {\\n        let occupancy = monitorRoomOccupancy('room102');\\n        if (occupancy === 0) {\\n            event.cleanRoom('room102');\\n        }\\n        let minibarStatus = monitorMinibarStatus('room102');\\n        if (minibarStatus.needsRestocking) {\\n            restockMinibar('room102', 'juice', 3);\\n        }\\n        let temp = monitorRoomTemperature('room102');\\n        if (temp > 24) {\\n            adjustRoomTemperature('room102', 22);\\n        }\\n        notifyHousekeeping('Afternoon hotel routine completed.');\\n    }\\n}\\n\\n// Evening routine for hotel\\nfunction eveningHotelRoutine() {\\n    if (event.eveningRoutine) {\\n        let occupancy = monitorRoomOccupancy('room103');\\n        if (occupancy === 0) {\\n            event.turnDownService('room103');\\n        }\\n        let minibarStatus = monitorMinibarStatus('room103');\\n        if (minibarStatus.needsRestocking) {\\n            restockMinibar('room103', 'soda', 4);\\n        }\\n        let temp = monitorRoomTemperature('room103');\\n        if (temp < 18) {\\n            adjustRoomTemperature('room103', 20);\\n        }\\n        notifyHousekeeping('Evening hotel routine completed.');\\n    }\\n}",
        "accurate_docstring": "When in the morningHotelRoutine, monitor the occupancy of room101. If the occupancy is zero, clean room101. Monitor the minibar status of room101. If the minibar needs restocking, restock it with 5 units of water. Monitor the temperature of room101. If the temperature is below 20°C, adjust the temperature to 22°C. Notify housekeeping that the morning hotel routine is completed. In the afternoonHotelRoutine, monitor the occupancy of room102. If the occupancy is zero, clean room102. Monitor the minibar status of room102. If the minibar needs restocking, restock it with 3 units of juice. Monitor the temperature of room102. If the temperature is above 24°C, adjust the temperature to 22°C. Notify housekeeping that the afternoon hotel routine is completed. In the eveningHotelRoutine, monitor the occupancy of room103. If the occupancy is zero, provide turn down service for room103. Monitor the minibar status of room103. If the minibar needs restocking, restock it with 4 units of soda. Monitor the temperature of room103. If the temperature is below 18°C, adjust the temperature to 20°C. Notify housekeeping that the evening hotel routine is completed.",
        "class": "room",
        "template_docstring": "WHEN in the morningHotelRoutine, DO monitor the occupancy of room101; IF the occupancy is zero, THEN clean room101; monitor the minibar status of room101; IF the minibar needs restocking, THEN restock it with 5 units of water; monitor the temperature of room101; IF the temperature is below 20°C, THEN adjust the temperature to 22°C; notify housekeeping that the morning hotel routine is completed; WHEN in the afternoonHotelRoutine, DO monitor the occupancy of room102; IF the occupancy is zero, THEN clean room102; monitor the minibar status of room102; IF the minibar needs restocking, THEN restock it with 3 units of juice; monitor the temperature of room102; IF the temperature is above 24°C, THEN adjust the temperature to 22°C; notify housekeeping that the afternoon hotel routine is completed; WHEN in the eveningHotelRoutine, DO monitor the occupancy of room103; IF the occupancy is zero, THEN provide turn down service for room103; monitor the minibar status of room103; IF the minibar needs restocking, THEN restock it with 4 units of soda; monitor the temperature of room103; IF the temperature is below 18°C, THEN adjust the temperature to 20°C; notify housekeeping that the evening hotel routine is completed."
    }
]